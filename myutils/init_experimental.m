function net = init_experimental(scal,init_bias,DIMS)
  % Block 1
  addpath ../../o2p-release1/external_src/
  DefaultVal('*scal','1');
  DefaultVal('*init_bias','0');
  DefaultVal('*DIMS','64');
%   randfunc = @randortho;
  randfunc = @randn;
  net.layers = [];
  
  net.layers{end+1} = struct('name', 'conv1_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, 3, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu1_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv1_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu1_2', ...
                             'type', 'relu') ;
  if 0
  net.layers{end+1} = struct('name', 'conv1_3', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu1_3', ...
                             'type', 'relu') ;
  end
  
 net.layers{end+1} = struct('name', 'mpool1', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride', 2, ...
                             'pad', 0) ;
  % Block 2                
  net.layers{end+1} = struct('name', 'conv2_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu2_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv2_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu2_2', ...
                             'type', 'relu') ;
                         if 0
   net.layers{end+1} = struct('name', 'conv2_3', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu2_3', ...
                             'type', 'relu') ;
                         end
  net.layers{end+1} = struct('name', 'mpool2', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride', 2, ...
                             'pad', 0) ;
                         
  % Block 3
  net.layers{end+1} = struct('name', 'conv3_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu3_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv3_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu3_2', ...
                             'type', 'relu') ;
                         
  net.layers{end+1} = struct('name', 'conv3_3', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu3_3', ...
                             'type', 'relu') ;
                         

  net.layers{end+1} = struct('name', 'conv3_4', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu3_4', ...
                             'type', 'relu') ;
                         
  net.layers{end+1} = struct('name', 'mpool3', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride', 1, ...
                             'pad', 1) ;
                           
  % Block 4
  net.layers{end+1} = struct('name', 'conv4_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu4_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv4_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu4_2', ...
                             'type', 'relu') ;
  
  net.layers{end+1} = struct('name', 'mpool4', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride',1, ...
                             'pad', 0) ;

  % Block 5
  net.layers{end+1} = struct('name', 'conv5_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu5_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv5_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu5_2', ...
                             'type', 'relu') ;
  
  net.layers{end+1} = struct('name', 'mpool5', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride',1, ...
                             'pad', 0) ;
                         
    % Block 6
  net.layers{end+1} = struct('name', 'conv6_1', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu6_1', ...
                             'type', 'relu') ;

  net.layers{end+1} = struct('name', 'conv6_2', ...
                             'type', 'conv', ...
                             'filters', 0.01/scal * randfunc([3, 3, DIMS, DIMS], 'single'), ...
                             'biases', init_bias*ones(1, DIMS, 'single'), ...
                             'stride', 1, ...
                             'pad', 1, ...
                             'filtersLearningRate', 1, ...
                             'biasesLearningRate', 2, ...
                             'filtersWeightDecay', 1, ...
                             'biasesWeightDecay', 0) ;
  net.layers{end+1} = struct('name', 'relu6_2', ...
                             'type', 'relu') ;
  
  net.layers{end+1} = struct('name', 'mpool6', ...
                             'type', 'pool', ...
                             'method', 'max', ...
                             'pool', [2 2], ...
                             'stride',1, ...
                             'pad', 0) ;
end
